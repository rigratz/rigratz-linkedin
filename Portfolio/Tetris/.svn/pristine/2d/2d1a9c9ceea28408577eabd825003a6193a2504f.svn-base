/*
 * TCSS 305
 * 
 * Final Assignment - Tetris
 */

package gui;


import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;

import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.Timer;

import model.Board;
import model.Board.GameStatus;
import model.TetrisPiece;

/**
 * This class creates the GUI for playing Tetris.
 * 
 * @author Riley Gratzer
 * @version 1.0
 */
public class TetrisGUI implements ActionListener, Observer {

    /**
     * Timer's initial delay.
     */
    public static final int INITIAL_DELAY = 1000;
    
    /**
     * Number of random pieces to create.
     */
    private static final int NUM_OF_PIECES = 10000;
    
    /**
     * Initial dimension of info Box.
     */
    private static final Dimension BOX_DIMENSION = new Dimension(150, 480);
    
    /**
     * The frame containing the GUI elements of Tetris.
     */
    private final JFrame myFrame;
    
    /**
     * The game's board.
     */
    private final Board myBoard;
    
    /**
     * The panel to draw the game board.
     */
    private final TetrisPanel myPanel;
    
    /**
     * The game's timer.
     */
    private final Timer myTimer;
    
    /**
     * The list of TetrisPieces for the game.
     */
    private final List<TetrisPiece> myPieces;
    
    /**
     * 
     */
    private final NextPieceViewer myNextPieceViewer;
    
    /**
     * The game's score panel.
     */
    private final ScorePanel myScorePanel;
    
    /**
     * The game's information stored in a box.
     */
    private final Box myInfoBox;
    
//    /**
//     * The game's controls.
//     */
//    private final Controls myControls;
    
    
    
    /**
     * Constructor of the TetrisGUI.
     */
    public TetrisGUI() {
        myFrame = new JFrame();
        myBoard = new Board();
        myTimer = new Timer(INITIAL_DELAY, this);
//        myControls = new Controls();
        myPanel = new TetrisPanel(myBoard, myTimer);
        myNextPieceViewer = new NextPieceViewer();
        myScorePanel = new ScorePanel(myTimer);
        myPieces = new ArrayList<TetrisPiece>();
        myInfoBox = createInfoBox();
        
    }

    /**
     * Forms the GUI and starts the game.
     */
    public void start() {
        myFrame.addKeyListener(myPanel);
        myFrame.setTitle("Tetris");
        myFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        createPieces(myPieces);

        
        final JMenuBar menuBar = new JMenuBar();
        menuBar.add(fileMenu());
        menuBar.add(helpMenu());
        myFrame.setJMenuBar(menuBar);
        
        myFrame.setResizable(true);
        myFrame.add(myPanel, BorderLayout.CENTER);

        myFrame.add(myInfoBox, BorderLayout.EAST);
        myBoard.addObserver(this);
        myBoard.addObserver(myPanel);
        myBoard.addObserver(myNextPieceViewer);
        myBoard.addObserver(myScorePanel);
        
        myBoard.setPieceSequence(myPieces);
        myTimer.start();
        myFrame.pack();
        myFrame.setMinimumSize(new Dimension(myFrame.getWidth(), myFrame.getHeight()));
        myFrame.setVisible(true);
    }

    /**
     * Creates 10000 pieces for the game.
     * 
     * @param thePieces might not be needed?
     */
    private void createPieces(final List<TetrisPiece> thePieces) {
        for (int i = 0; i < NUM_OF_PIECES; i++) {
            thePieces.add(TetrisPiece.getRandomPiece());
        }
    }
    
    /**
     * Creates the panel with Score and next piece information.
     *  
     * @return the info panel.
     */
    private Box createInfoBox() {
        final Box infoBox = new Box(BoxLayout.Y_AXIS);
        infoBox.add(myNextPieceViewer);
        
        infoBox.add(Box.createVerticalGlue());
        
        infoBox.add(myScorePanel);
        infoBox.setPreferredSize(BOX_DIMENSION);
        return infoBox;
    }
    /**
     * Creates the File JMenu.
     * 
     * @return the File menu.
     */
    private JMenu fileMenu() {
        final JMenu menu = new JMenu("File");
        menu.add(new JMenuItem("Start"));
        menu.add(new JMenuItem("Exit"));
        return menu;
    }
    
    /**
     * Creates the Help JMenu.
     * 
     * @return the help menu.
     */
    private JMenu helpMenu() {
        final JMenu menu = new JMenu("Help");
        
        final JMenuItem controls = new JMenuItem("Controls...");
        controls.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent theEvent) {
                final ControlPanel c = new ControlPanel();
                myFrame.add(c, BorderLayout.WEST);
                myFrame.pack();
            }
        });
        menu.add(controls);
        menu.add(new JMenuItem("Scoring Info..."));
        menu.addSeparator();
        menu.add(new JMenuItem("About..."));
        return menu;
    }
    
    /**
     * Updates the next piece when notified by an observable passing a GameStatus.
     * 
     * @param theO is the observable.
     * @param theArg is the data being passed by the observable.
     */
    @Override
    public void update(final Observable theO, final Object theArg) {
        if (theArg instanceof GameStatus) {
            myPanel.terminate(false);
            myTimer.stop();
        }

    }


    @Override
    public void actionPerformed(final ActionEvent theEvent) {
        final Object source = theEvent.getSource();
        if (source.equals(myTimer)) {
            myBoard.step();
        }
    }
}
