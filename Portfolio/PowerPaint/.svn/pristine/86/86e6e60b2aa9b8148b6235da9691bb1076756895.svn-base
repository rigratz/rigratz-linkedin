package gui;

import gui.PowerPaintGUI.Undoable;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.Stroke;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JPanel;

import tools.Ellipse;
import tools.Line;
import tools.Pencil;
import tools.Picture;
import tools.Rectangle;
import tools.Tool;


/**
 * This is the panel for drawing shapes in PowerPaint.
 * 
 * @author Riley Gratzer
 * @version 1.2
 */
@SuppressWarnings("serial")
public class DrawingPanel extends JPanel {


    /**
     * j.
     */
    public static final Tool LINE = new Line();
    
    /**
     * g.
     */
    public static final Tool RECTANGLE = new Rectangle();
    
    /**
     * d.
     */
    public static final Tool ELLIPSE = new Ellipse();
    
    /**
     *  g.
     */
    public static final Tool PENCIL = new Pencil();
    
    /**
     * The spacing of grid lines.
     */
    private static final int SPACING = 10;

    /**
     * 
     */
    private Color myColor;
    
    /**
     * 
     */
    private final List<Point> myPath;
    
    /**
     * 
     */
    private Stroke myStroke;
    
    /**
     * 
     */
    private boolean myDrawing;
    
    /**
     * 
     */
    private boolean myGrid;

    /**
     * 
     */
    private final List<Picture> myPictures;
    
    /**
     * 
     */
    private final List<Picture> myRedoables;
    /**
     * 
     */
    private Tool myTool;
    /**
     * 
     */
    private final Undoable myUndoables;
    
    /**
     * Constructor for the drawing panel.
     * 
     * @param theUndoables are the undo menu items.
     */
    public DrawingPanel(final Undoable theUndoables) {
        super();
        // Initialize the Drawing Panel's settings.
        initialize();
        // Create all necessary Array Lists.
        myPath = new ArrayList<Point>();        
        myPictures = new ArrayList<Picture>();
        myRedoables = new ArrayList<Picture>();
        // Initialize field with passed Undoable object.
        myUndoables = theUndoables;
        // Add mouse listeners.
        addMouseListener(new MouseActions());
        addMouseMotionListener(new MouseActions());
    }
    
    /**
     * Initializes the settings used for drawing on the panel.
     */
    private void initialize() {
        myTool = PENCIL;
        myStroke = new BasicStroke();
        myColor = Color.BLACK;
        myGrid = false;
    }
    
    /**
     * Paints stuff.
     * 
     * @param theGraphics is the graphics.
     */
    @Override
    public void paintComponent(final Graphics theGraphics) {
        super.paintComponent(theGraphics);
        final Graphics2D g = (Graphics2D) theGraphics;
        setBackground(Color.WHITE);
        g.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                           RenderingHints.VALUE_ANTIALIAS_ON);
        
        
        
        // Draw old shapes.
        if (!myPictures.isEmpty()) {
            for (final Picture drawing: myPictures) {
                if (isStrokeVisible(drawing.getStroke())) {
                    g.setColor(drawing.getColor());
                    g.setStroke(drawing.getStroke());
                
                    drawing.getTool().drawShape(g, drawing.getPath());
                }
            }
            myUndoables.getUndoAll().setEnabled(true);
            myUndoables.getUndo().setEnabled(true);
        }
        
        // Draw current shape.
        if (myDrawing && isStrokeVisible(myStroke)) {
            g.setColor(myColor);
            g.setStroke(myStroke);
            myTool.drawShape(g, myPath);
        }
        
        // Draw grid (maybe)
        if (myGrid) {
            g.setColor(Color.GRAY);
            g.setStroke(new BasicStroke());
            drawGrid(g, SPACING);
        }
        
    }
    /**
     * Changes the drawing color.
     * 
     * @param theColor is the color.
     */
    public void setColor(final Color theColor) {
        myColor = theColor;
    }
    
    /**
     * Changes the stroke size.
     * 
     * @param theStroke is the drawing thickness.
     */
    public void setStroke(final Stroke theStroke) {
        myStroke = theStroke;
    }
    /**
     * 
     * @param theStroke to be checked
     * @return the visibility.
     */
    public boolean isStrokeVisible(final Stroke theStroke) {
        return !theStroke.equals(new BasicStroke(0));
    }
    /**
     * Erases all drawings.
     */
    public void undoAll() {
        myPictures.clear();  
        repaint();
    }
    
    /**
     * 
     * @param theTool h
     */
    public void setTool(final Tool theTool) {
        myTool = theTool;
        
    }
    
    /**
     * Tells if the grid is enabled or not.
     * 
     * @return the grid's enabled status.
     */
    public boolean isGrid() {
        return myGrid;
    }
    
    /**
     * Changes the grid's enabled status.
     * 
     * @param theEnabler enables or disables the grid.
     */
    public void enableGrid(final boolean theEnabler) {
        myGrid = theEnabler;
        repaint();
    }
    /**
     * 
     * @return the list of pictures.
     */
    public List<Picture> getPictures() {
        return myPictures;
    }
    /**
     * 
     * @return the list of redoable pictures.
     */
    public List<Picture> getRedoables() {
        return myRedoables;
    }
    
    
    
    /**
     * 
     * @param thePath is a list of points.
     * @return the copy
     */
    private List<Point> copyPath(final List<Point> thePath) {
        final List<Point> copy = new ArrayList<Point>();
        for (final Point p: thePath) {
            copy.add(p);
        }
        return copy;
    }
    /**
     * Draws the grid.
     * 
     * @param theGraphics are the drawing graphics.
     * @param theSpacing is the spacing width of the grid lines.
     */
    private void drawGrid(final Graphics theGraphics, final int theSpacing) {
        for (int i = theSpacing; i <= getSize().width; i += theSpacing) {
            theGraphics.drawLine(i, 0, i, getSize().height);
        }

        for (int i = theSpacing; i <= getSize().height; i += theSpacing) {
            theGraphics.drawLine(0, i, getSize().width, i);
        }
    }

    /**
     * This class creates mouse listeners for drawing.
     * 
     * @author Riley Gratzer
     * @version 1.2
     */
    class MouseActions extends MouseAdapter {

        @Override
        public void mousePressed(final MouseEvent theE) {
            myDrawing = true;
            myPath.clear();
            myPath.add(theE.getPoint());
            repaint();
        }

        @Override
        public void mouseReleased(final MouseEvent theE) {
            myDrawing = false;
            myPath.add(theE.getPoint());
            myPictures.add(new Picture(myTool, myColor, myStroke, copyPath(myPath)));
            repaint();
            
        }

        @Override
        public void mouseDragged(final MouseEvent theE) {
            myPath.add(theE.getPoint());
            repaint();
        }
    }

    

    
}
